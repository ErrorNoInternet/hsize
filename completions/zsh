#compdef hsize

autoload -U is-at-least

_hsize() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'-p+[Number of decimal places to include in the converted number]:PRECISION: ' \
'--precision=[Number of decimal places to include in the converted number]:PRECISION: ' \
'-f+[Size scale of the specified (input) numbers]:SCALE:(b k m g t p e z y)' \
'--from-scale=[Size scale of the specified (input) numbers]:SCALE:(b k m g t p e z y)' \
'-t+[Size scale of the converted numbers]:SCALE:(b k m g t p e z y)' \
'--to-scale=[Size scale of the converted numbers]:SCALE:(b k m g t p e z y)' \
'-s+[Character(s) to put between the number and unit]:SEPARATOR: ' \
'--separator=[Character(s) to put between the number and unit]:SEPARATOR: ' \
'-B[Whether or not the specified (input) numbers are powers of 2 (1K = 1024)]' \
'--from-binary[Whether or not the specified (input) numbers are powers of 2 (1K = 1024)]' \
'-b[Whether or not the converted numbers should be powers of 2 (1K = 1024)]' \
'--to-binary[Whether or not the converted numbers should be powers of 2 (1K = 1024)]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'::sizes:' \
":: :_hsize_commands" \
"*::: :->hsize" \
&& ret=0
    case $state in
    (hsize)
        words=($line[2] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:hsize-command-$line[2]:"
        case $line[2] in
            (replace)
_arguments "${_arguments_options[@]}" \
'-r+[Regex to use for matching numbers]:REGEX: ' \
'--regex=[Regex to use for matching numbers]:REGEX: ' \
'-U[Enable multi-line regex searching]' \
'--multi-line[Enable multi-line regex searching]' \
'-i[Modify (search and replace) files in-place]' \
'--in-place[Modify (search and replace) files in-place]' \
'-h[Print help]' \
'--help[Print help]' \
'*::files:_files' \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" \
'-s+[Output completion files for the specified shell]:SHELL:(bash elvish fish powershell zsh)' \
'--shell=[Output completion files for the specified shell]:SHELL:(bash elvish fish powershell zsh)' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_hsize__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:hsize-help-command-$line[1]:"
        case $line[1] in
            (replace)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_hsize_commands] )) ||
_hsize_commands() {
    local commands; commands=(
'replace:Use regex to search and replace numbers' \
'r:Use regex to search and replace numbers' \
're:Use regex to search and replace numbers' \
'completions:Generate shell completion files' \
'c:Generate shell completion files' \
'co:Generate shell completion files' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'hsize commands' commands "$@"
}
(( $+functions[_hsize__completions_commands] )) ||
_hsize__completions_commands() {
    local commands; commands=()
    _describe -t commands 'hsize completions commands' commands "$@"
}
(( $+functions[_hsize__help__completions_commands] )) ||
_hsize__help__completions_commands() {
    local commands; commands=()
    _describe -t commands 'hsize help completions commands' commands "$@"
}
(( $+functions[_hsize__help_commands] )) ||
_hsize__help_commands() {
    local commands; commands=(
'replace:Use regex to search and replace numbers' \
'completions:Generate shell completion files' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'hsize help commands' commands "$@"
}
(( $+functions[_hsize__help__help_commands] )) ||
_hsize__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'hsize help help commands' commands "$@"
}
(( $+functions[_hsize__help__replace_commands] )) ||
_hsize__help__replace_commands() {
    local commands; commands=()
    _describe -t commands 'hsize help replace commands' commands "$@"
}
(( $+functions[_hsize__replace_commands] )) ||
_hsize__replace_commands() {
    local commands; commands=()
    _describe -t commands 'hsize replace commands' commands "$@"
}

if [ "$funcstack[1]" = "_hsize" ]; then
    _hsize "$@"
else
    compdef _hsize hsize
fi
